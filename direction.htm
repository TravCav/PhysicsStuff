<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"></head><body style="background-color: black">
    <script>
        var parent = this;
        var canvas, context;
        var Generators = new Array();

        window.requestAnimFrame = (function () {
            return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    function (callback, element) {
                        window.setTimeout(callback, 1000 / 60);
                    };
        })();

        function Point(x, y) {
            this.x = x;
            this.y = y;

            // Wrap to other side
            this.BoundsCheck = function () {
                if (this.x > canvas.width) { this.x =canvas.width; }
                if (this.x < 0) { this.x = 0; }
                if (this.y > canvas.height) { this.y = canvas.height; }
                if (this.y < 0) { this.y = 0; }
            }
        }

        function Unit(startPoint) {
            this.Location = startPoint;
            this.Destination = this.Location;

            this.mx = 0;
            this.my = 0;

            this.DoMovement = function () {
                if (this.Destination === null) {
                    this.mx = ((Math.random() * 2) - 1);
                    this.my = ((Math.random() * 2) - 1);
                } else {
                    if (
                        (this.Location.x > this.Destination.x - 5 && this.Location.x < this.Destination.x + 5) &&
                        (this.Location.y > this.Destination.y - 5 && this.Location.y < this.Destination.y + 5)) {
                        this.Destination = null;
                    }
                }

                this.Location.x += this.mx;
                this.Location.y += this.my;

                this.Location.BoundsCheck();
            }

            this.SetDestination = function (newDestination,mass) {
                mass /= 10;
                if (newDestination === this.Destination) { return; }
                this.Destination = newDestination;
                
                var dx = (this.Destination.x - this.Location.x);
                var dy = (this.Destination.y - this.Location.y);
                var distance = Math.sqrt((dx * dx) + (dy * dy));
                var mag = 1/distance;
                this.mx = dx * mag * mass;
                this.my = dy * mag * mass;
            }

            ////this.SetDestination(new Point(this.Location.x + (parseInt(Math.random() * 100) - 50), this.Location.y + (parseInt(Math.random() * 100) - 50)));

        }

        function Generator() {
            this.LastTick = (new Date()).getTime()-10000;
            this.Units = new Array();
            this.Location = new Point((Math.random() * canvas.width), (Math.random() * canvas.height));
            this.Color = 'rgb(' + parseInt(Math.random() * 255) + ',' + parseInt(Math.random() * 255) + ',' + parseInt(Math.random() * 255) + ')'
            this.MaxInterval = 60000
            this.DirectionInterval = parseInt(Math.random() * this.MaxInterval);
            this.LastDirectionTick = (new Date()).getTime();

            this.AddUnit = function () {
                if (((new Date()).getTime() - this.LastTick) > 1000) {
                    this.Units.push(new Unit(new Point(this.Location.x, this.Location.y)));
                    this.LastTick = (new Date()).getTime();
                }
            }

            this.MoveUnits = function () {
                context.fillStyle = this.Color;

                for (var unit = 0; unit < this.Units.length; unit++) {
                    this.Units[unit].DoMovement();
                    context.fillRect(this.Units[unit].Location.x, this.Units[unit].Location.y, 1, 1);
                }
            }

            this.DirectionChange = function () {
                if (((new Date()).getTime() - this.LastDirectionTick) > this.DirectionInterval) {
                    var NewLocation = this.Location;
                    /*switch (parseInt(Math.random() * 3)) {
                        case 1:
                            // random Dance
                            NewLocation = new Point((Math.random() * canvas.width), (Math.random() * canvas.height));
                        case 2:
                            // attack random
                            NewLocation = parent.Generators[parseInt(Math.random() * parent.Generators.length)].Location;
                        default:
                        */
                    var unitCount = 0;
                    var targetGenerator = -1;
                    for (var gen = 0; gen < Generators.length; gen++) {
                        if (Generators[gen].Units.length>= unitCount) {
                            NewLocation = Generators[gen].Location;
                            unitCount = Generators[gen].Units.length;
                        }
                    }
                    //}

                    for (var unit = 0; unit < this.Units.length; unit++) {
                        this.Units[unit].SetDestination(NewLocation,unitCount);
                    }
                    this.LastDirectionTick = (new Date()).getTime();
                    this.DirectionInterval = parseInt(Math.random() * this.MaxInterval);
                }
            }
        }

        function init() {
            canvas = document.createElement('canvas');
            canvas.width = window.innerWidth-50;
            canvas.height = window.innerHeight-50;

            context = canvas.getContext('2d');

            document.body.appendChild(canvas);
            for (var i = 0; i < 20; i++) {
                Generators.push(new Generator());
            }
        }

        function animate() {
            requestAnimFrame(animate);
            draw();
            for (var gen = 0; gen < Generators.length; gen++) {
                Generators[gen].AddUnit();
                Generators[gen].DirectionChange();
            }
        }

        function draw() {
            context.clearRect(0, 0, canvas.width, canvas.height);


            for (var gen = 0; gen < Generators.length; gen++) {
                context.beginPath();
                context.fillStyle = Generators[gen].Color.replace("rgb","rgba").replace(")",",0.5)");
                context.arc(Generators[gen].Location.x, Generators[gen].Location.y, (Generators[gen].Units.length / 5), 0, Math.PI * 2, true);
                context.fill();
            }

            context.closePath();

            context.beginPath();
            for (var gen = 0; gen < Generators.length; gen++) {
                Generators[gen].MoveUnits();
            }

            context.closePath();
            context.fill();
            CheckForCollision();

            /*
            for (var i = 0; i < Generators.length; i++) {
                context.fillStyle = Generators[i].Color;
                context.fillText(i + ': ' + Generators[i].Units.length, 0, 10 * (i + 1));
            }
            */

        }

        function CheckForCollision() {
            var hit = false;
            var hits = new Array();

            context.beginPath();
            context.fillStyle = 'rgb(255,255,255)';

            for (var gen1 = 0; gen1 < Generators.length; gen1++) {
                for (var unit1 = 0; unit1 < Generators[gen1].Units.length; unit1++) {
                    for (var gen2 = (gen1 + 1) ; gen2 < Generators.length; gen2++) {
                        for (var unit2 = 0; unit2 < Generators[gen2].Units.length; unit2++) {
                            if (parseInt(Generators[gen1].Units[unit1].Location.x) == parseInt(Generators[gen2].Units[unit2].Location.x) &&
                                parseInt(Generators[gen1].Units[unit1].Location.y) == parseInt(Generators[gen2].Units[unit2].Location.y)) {
                                context.arc(Generators[gen1].Units[unit1].Location.x, Generators[gen1].Units[unit1].Location.y, 5, 0, Math.PI * 2, true);

                                hit = true;
                                Generators[gen2].Units.splice(unit2, 1);
                            }
                            /*else if (
                                // attack nearest?
                                Generators[gen1].Units[unit1].Location.x > Generators[gen2].Units[unit2].Location.x - 10 &&
                                Generators[gen1].Units[unit1].Location.x < Generators[gen2].Units[unit2].Location.x + 10 &&
                                Generators[gen1].Units[unit1].Location.y > Generators[gen2].Units[unit2].Location.y - 10 &&
                                Generators[gen1].Units[unit1].Location.y < Generators[gen2].Units[unit2].Location.y + 10) {
                                //Generators[gen1].Units[unit1].Destination = Generators[gen2].Units[unit2].Location;
                                Generators[gen2].Units[unit2].Destination = Generators[gen1].Units[unit1].Location;
                            }
                            */
                        }
                    }

                    if (hit === true) {
                        Generators[gen1].Units.splice(unit1, 1);
                        hit = false;
                    }
                }
                
                if (Generators[gen1].Units.length === 0) {
					Generators.splice(gen1,1);
				}
            }

            context.fill();
            context.closePath();
        }


        init();
        animate();

    </script><canvas height="717" width="1316"></canvas>


</body></html>
